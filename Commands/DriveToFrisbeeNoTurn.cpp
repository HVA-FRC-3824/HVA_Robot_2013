// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveToFrisbeeNoTurn.h"
#define BRAKE_TIME      0.3

DriveToFrisbeeNoTurn::DriveToFrisbeeNoTurn(double power) 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	PIDcontroller = new PIDController(0.0, 0.0, 0.0, this, this);
	
	// get the drive duration
	drivePower = power;
	timer = new Timer();
}
// Called just before this Command runs the first time
void DriveToFrisbeeNoTurn::Initialize() 
{
	PIDcontroller->SetPID(0.04, 0.004, 0.04);
	
	if (drivePower < 0)
		drivePower = -drivePower;
	
	braking = false;
	PIDcontroller->SetSetpoint(PIDGet());
	PIDcontroller->Enable();
	
	timer->Reset();
	timer->Start();
}
// Called repeatedly when this Command is scheduled to run
void DriveToFrisbeeNoTurn::Execute() 
{
//	Robot::drivetrain->holonomic->HolonomicDrive(0.4, 0,0);	
}
// Make this return true when this Command no longer needs to run execute()
bool DriveToFrisbeeNoTurn::IsFinished()
{	
	if ((braking == false) && 
	    (SmartDashboard::GetNumber("Frisbee Size") >= SmartDashboard::GetNumber("Drive to Size")))
	{
		// reached the distination so brake
		braking = true;
		
		// brake with the same power as the drive
	    drivePower = -drivePower;
		   
		// reset the timer for brake tmie
		timer->Reset();
	}
	else if (braking == true)
	{
	   if (timer->Get() > BRAKE_TIME)
		   return true;
	}
		
   return false;	
}
// Called once after isFinished returns true
void DriveToFrisbeeNoTurn::End() 
{
   // Stop the PID
   PIDcontroller->Disable();
		
   // stop the motor and time
   Robot::drivetrain->holonomic->StopMotor();
   timer->Stop();
   
//	Robot::drivetrain->holonomic->HolonomicDrive(0.0, 0,0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveToFrisbeeNoTurn::Interrupted()
{
	End();
}
double DriveToFrisbeeNoTurn::PIDGet()
{
   return Robot::drivetrain->gyro->PIDGet();
}
void DriveToFrisbeeNoTurn::PIDWrite(float output)
{
   Robot::drivetrain->HolonomicDrive(drivePower, 0.0, output);
}
