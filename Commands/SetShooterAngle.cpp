// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "SetShooterAngle.h"
#define SHOOTER_ANGLE_THRESHOLD      0.1
#define SHOOTER_ANGLE_HOME         575.0
SetShooterAngle::SetShooterAngle() 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterAngleAdjust);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void SetShooterAngle::Initialize() 
{
  // setup the PID controller
  Robot::shooterAngleAdjust->getPIDController()->SetSetpoint(SHOOTER_ANGLE_HOME);
  Robot::shooterAngleAdjust->getPIDController()->SetAbsoluteTolerance(SHOOTER_ANGLE_THRESHOLD);
}
// Called repeatedly when this Command is scheduled to run
void SetShooterAngle::Execute() 
{
   float angle;
   angle = Robot::oi->getShootJoystick()->GetAxis(Joystick::kYAxis);
   angle = (angle * 75) + 575;
   Robot::shooterAngleAdjust->getPIDController()->SetSetpoint(angle);
   
   SmartDashboard::PutNumber("Shooter Angle", angle);
   SmartDashboard::PutNumber("Shooter Angle Setpoint", Robot::shooterAngleAdjust->getPIDController()->GetSetpoint());
   SmartDashboard::PutBoolean("Shooter Angle Enabled", Robot::shooterAngleAdjust->getPIDController()->IsEnabled());
   SmartDashboard::PutNumber("Shooter Motor P", Robot::shooterAngleAdjust->getPIDController()->GetP());
   SmartDashboard::PutNumber("Shooter Motor I", Robot::shooterAngleAdjust->getPIDController()->GetI());
   SmartDashboard::PutNumber("Shooter Motor D", Robot::shooterAngleAdjust->getPIDController()->GetD());
   SmartDashboard::PutNumber("Potentiometer PID", Robot::shooterAngleAdjust->potentiometer->PIDGet());
   SmartDashboard::PutNumber("Motor PID", Robot::shooterAngleAdjust->getPIDController()->Get());
//   SmartDashboard::PutNumber("PID Error", Robot::shooterAngleAdjust->getPIDController()->GetError());
//   SmartDashboard::PutBoolean("In range", Robot::shooterAngleAdjust->getPIDController()->OnTarget());
}
// Make this return true when this Command no longer needs to run execute()
bool SetShooterAngle::IsFinished() 
{
   // default command, so always return false (never ends)
   return false;
}
// Called once after isFinished returns true
void SetShooterAngle::End() 
{
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetShooterAngle::Interrupted() 
{
}
