// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "FrisbeeShootReversed.h"
#define PUSHER_TIMER                  0.1
FrisbeeShootReversed::FrisbeeShootReversed() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterPusher);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	pusherTimer = new Timer();
}
// Called just before this Command runs the first time
void FrisbeeShootReversed::Initialize() 
{
	   // start the shooter
		Robot::shooterPusher->motor->Set(Relay::kForward);
		// reset and start the timer
		pusherTimer->Reset();
		pusherTimer->Start();
		
		// <DEBUG>
		printf("ERIF\n");
		// </DEBUG>
}
// Called repeatedly when this Command is scheduled to run
void FrisbeeShootReversed::Execute() {
	
}
// Make this return true when this Command no longer needs to run execute()
bool FrisbeeShootReversed::IsFinished() 
{
	   //don't read stopSwitch until we know we are off it
	   if (pusherTimer->Get() > PUSHER_TIMER) 
		{
			return true;
		}
	  return false;
}
// Called once after isFinished returns true
void FrisbeeShootReversed::End() 
{
	   // stop the shooter moter and the timer
		Robot::shooterPusher->motor->Set(Relay::kOff);
		pusherTimer->Stop();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void FrisbeeShootReversed::Interrupted() 
{
	End();
}
