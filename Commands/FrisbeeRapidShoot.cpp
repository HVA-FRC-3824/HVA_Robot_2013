// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
//
#define VOLTAGE_SHOOT_WAIT_TIME 2
#include "FrisbeeRapidShoot.h"
FrisbeeRapidShoot::FrisbeeRapidShoot(int reqShots) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	voltageShootTimer.Start(); //We start it before initialize so that we don't wait before the first shot.
	requiredShots = reqShots; //by default shoot as long as pressed
}
// Called just before this Command runs the first time
void FrisbeeRapidShoot::Initialize() {
	shotCount = 0;
}
// Called repeatedly when this Command is scheduled to run
void FrisbeeRapidShoot::Execute() {
	if (!shootCommand.IsRunning()) 
	{
		bool isRPM = !(DriverStation::GetInstance()->GetEnhancedIO().GetDigital(INPUT_SHOOTER_RPM_VOLTAGE));
		if((isRPM && Robot::shooterWheel->getPIDController()->OnTarget())
				|| (!isRPM && voltageShootTimer.Get()>VOLTAGE_SHOOT_WAIT_TIME))
		{
			shootCommand.Start();
			voltageShootTimer.Reset();
			shotCount++;
		}
	}	
}
// Make this return true when this Command no longer needs to run execute()
bool FrisbeeRapidShoot::IsFinished() {
	return shotCount>=requiredShots && shootCommand.IsFinished();
}
// Called once after isFinished returns true
void FrisbeeRapidShoot::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void FrisbeeRapidShoot::Interrupted() {
}
