// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "SetShooterSpeed.h"
#include <math.h>
#define THRESHOLD 50.0
SetShooterSpeed::SetShooterSpeed(double speed) 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterWheel);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	// remember the desired shooter speed
	shooterSpeed = speed;
	SmartDashboard::PutNumber("Shooter speed", shooterSpeed);
	
	// indicate that the speed was specified in the constructor
	SpeedSpecifiedInConstructor = true;
}
SetShooterSpeed::SetShooterSpeed() 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterWheel);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	SmartDashboard::PutNumber("Shooter speed", 0.0);
	
	// indicate that the speed was not specified in the constructor
	SpeedSpecifiedInConstructor = false;
}
// Called just before this Command runs the first time
void SetShooterSpeed::Initialize() 
{
   // determine if the shooter speed should be read from the Smart Dashboard
	if (SpeedSpecifiedInConstructor == true)
	{
      // read the desired shooter RPM from the constructor
		Robot::shooterWheel->getPIDController()->SetSetpoint(shooterSpeed); 
	}
	else
	{
	   // read the shooter speed from the Smart Dashboard
		shooterSpeed = SmartDashboard::GetNumber("Shooter speed");
		Robot::shooterWheel->getPIDController()->SetSetpoint(shooterSpeed);
		
		//printf("ShooterSpeed %f", SmartDashboard::GetNumber("Shooter speed"));
		//printf("P: %f I: %f D: %f", Robot::shooterWheel->getPIDController()->GetP(), Robot::shooterWheel->getPIDController()->GetI(), Robot::shooterWheel->getPIDController()->GetD());
	}
	
   // enable the PID controller
	Robot::shooterWheel->getPIDController()->Enable();
}
// Called repeatedly when this Command is scheduled to run
void SetShooterSpeed::Execute() 
{
	
}
// Make this return true when this Command no longer needs to run execute()
bool SetShooterSpeed::IsFinished() 
{
   // determine is the shooter speed is within the desired limit
	return fabs(shooterSpeed - Robot::shooterWheel->pidEncoder->PIDGet()) < THRESHOLD;
}
// Called once after isFinished returns true
void SetShooterSpeed::End() 
{
	// not disabling because we always want the shooter to keep running
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetShooterSpeed::Interrupted()
{
	// not disabling because we always want the shooter to keep running
	// ideally when interrupting it should reset to previous value but is probably overkill
}
