// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "FrisbeeAim.h"
#include <math.h>

#define AIM_PIXEL_THRESHOLD 		3
FrisbeeAim::FrisbeeAim() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	PIDcontroller = new PIDController(
		SmartDashboard::GetNumber("Shooter Aim P: "),
		SmartDashboard::GetNumber("Shooter Aim I: "),
		SmartDashboard::GetNumber("Shooter Aim D: "),
		new ImagePIDInput(),Robot::drivetrain);
}
// Called just before this Command runs the first time
void FrisbeeAim::Initialize() {
	// starts PID controller
	PIDcontroller->SetPID(SmartDashboard::GetNumber("Shooter Aim P: ")/1000.,
		SmartDashboard::GetNumber("Shooter Aim I: ")/1000.,
		SmartDashboard::GetNumber("Shooter Aim D: ")/1000.);
	PIDcontroller->SetSetpoint(0);
	PIDcontroller->Enable();
}
// Called repeatedly when this Command is scheduled to run
void FrisbeeAim::Execute() {
	//TODO: use Gyro as error of PID. Update setpoint based on best estimate of angle. To compute angle we need to estimate distance
	//Distance can be estimated by height of the top line of top target.
	SmartDashboard::PutNumber("Aim PID result",PIDcontroller->Get());
}
// Make this return true when this Command no longer needs to run execute()
bool FrisbeeAim::IsFinished() {
	return false; //fabs(SmartDashboard::GetNumber("camera offset")) < AIM_PIXEL_THRESHOLD;
}
// Called once after isFinished returns true
void FrisbeeAim::End() {
	PIDcontroller->Disable();
	Robot::drivetrain->holonomic->HolonomicDrive(0,0,0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void FrisbeeAim::Interrupted() {
	End();
}
