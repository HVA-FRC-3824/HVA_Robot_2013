// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "CypressGotoPositionTest.h"
#include "SetShooterAngle.h"
#include "SetShooterSpeed.h"

CypressGotoPositionTest::CypressGotoPositionTest() 
{
	CypressGotoPositionTest(0.0,0.0);
}

CypressGotoPositionTest::CypressGotoPositionTest(double angle, double velocity, bool isRPM)
{
	// Read in the parameters and store them
	m_angle = angle;
	m_velocity = velocity;
	m_isRPM = isRPM;
	setShooterAngle = NULL;
	setShooterSpeed = NULL;
}

// Called just before this Command runs the first time
void CypressGotoPositionTest::Initialize() 
{
	printf("IN Cypress Initialize\n");
	// Check to see if automated shooter position
	if (!(DriverStation::GetInstance()->GetEnhancedIO().GetDigital(INPUT_SHOOTER_ANGLE_ADJUSTMENT_MANUAL)) == false)
	{
		// If the command is created delete
		if(setShooterAngle != NULL)
			delete(setShooterAngle);
		setShooterAngle = new SetShooterAngle(m_angle);
		setShooterAngle->Start();
	}
	
	// Check to see if automated shooter speed
	if (!(DriverStation::GetInstance()->GetEnhancedIO().GetDigital(INPUT_SHOOTER_SPEED_ADJUSTMENT_MANUAL)) == false)
	{
		// If the command is created delete
		if(setShooterSpeed != NULL)
			delete(setShooterSpeed);
		setShooterSpeed = new SetShooterSpeed(m_velocity, m_isRPM);
		setShooterSpeed->Start();
	}
}

// Called repeatedly when this Command is scheduled to run
void CypressGotoPositionTest::Execute() 
{
	
}

// Make this return true when this Command no longer needs to run execute()
bool CypressGotoPositionTest::IsFinished() {
	return true;
}

// Called once after isFinished returns true
void CypressGotoPositionTest::End() 
{
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void CypressGotoPositionTest::Interrupted() 
{
	End();
}
