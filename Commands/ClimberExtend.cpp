// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ClimberExtend.h"
ClimberExtend::ClimberExtend() 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climberTipper);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
   // instantiate a timer class
	timer = new Timer();
}
// Called just before this Command runs the first time
void ClimberExtend::Initialize()
{
   // determine when the tipper have completed the move
   Robot::climberTipper->solenoid->Set(DoubleSolenoid::kForward);
   
   // start the timer to determine when the tipper has Extend
   timer->Reset();
   timer->Start();
}
// Called repeatedly when this Command is scheduled to run
void ClimberExtend::Execute() 
{
   
}
// Make this return true when this Command no longer needs to run execute()
bool ClimberExtend::IsFinished() 
{
   // stop the timer when move is complete  
	if (timer->Get() > TIPPER_EXTEND_RETRACT_TIME)
		return true;
	
	return false;
}
// Called once after isFinished returns true
void ClimberExtend::End()
{
   // stop the timer when move is complete
	timer->Stop();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ClimberExtend::Interrupted() 
{
   // use the end method to clean up command
   End();
}
