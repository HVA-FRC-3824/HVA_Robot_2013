// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveToFrisbee.h"
#include <math.h>
#include "ChassisTurnAngle.h"
DriveToFrisbee::DriveToFrisbee() : ChassisTurnAngle(0)
{	
	//DOES NOT REQUIRE ANYTHING BECAUSE IT USES CHASSIS-TURN AS SUBCOMMAND WHICH HANDLES 
	//THE REQUIRE
	
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
//	SmartDashboard::PutNumber("Pixel to Degree", 0.1); //TODO get correct value
//	SmartDashboard::PutNumber("Drive to Size", 160);
}
// Called just before this Command runs the first time
void DriveToFrisbee::Initialize()
{
	//SmartDashboard::PutString("Target Type", "frisbee");
	
	ChassisTurnAngle::Initialize();
	
	//pixelToDegree = SmartDashboard::GetNumber("Pixel to Degree");
	pixelToDegree = .1; //TODO: const
	
	target = Robot::drivetrain->gyro->GetAngle() +
					SmartDashboard::GetNumber("Frisbee Offset") * pixelToDegree;
	
	PIDcontroller.SetSetpoint(target);
}
// Called repeatedly when this Command is scheduled to run
void DriveToFrisbee::Execute() 
{
	
	//no need to call base class - doesn't do anything
	
//	target = .9*target + .1*Robot::drivetrain->gyro->GetAngle()-
//			SmartDashboard::GetNumber("camera offset")*pixelToDegree;
	
	//DISABLED drive too (only turning)
//	if (ChassisTurnAngle::IsFinished())
//	{
//		Robot::drivetrain->holonomic->HolonomicDrive(0.4, 0,0);
//	}
	
	//DISAbLED - not read
//	target = Robot::drivetrain->gyro->GetAngle() +
//					SmartDashboard::GetNumber("Frisbee Offset") * pixelToDegree;	
	
	
	//TODO: test if resetting the setpoint here works
	//if not reorient at least at the end (using a commandgroup)
	
}
// Make this return true when this Command no longer needs to run execute()
bool DriveToFrisbee::IsFinished() 
{
	return ChassisTurnAngle::IsFinished(); //DISABLED drive too - only turning
//	return SmartDashboard::GetNumber("Frisbee Size") >=
//		  	 SmartDashboard::GetNumber("Drive to Size");
}
// Called once after isFinished returns true
void DriveToFrisbee::End() 
{
	Robot::drivetrain->holonomic->HolonomicDrive(0, 0, 0);
	ChassisTurnAngle::End();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveToFrisbee::Interrupted() 
{
	ChassisTurnAngle::End();
}
