// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "SetPickupPosition.h"
#include "math.h"
SetPickupPosition::SetPickupPosition(double position_parameter)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pickup);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	m_position = position_parameter;
}
SetPickupPosition::SetPickupPosition() 
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pickup);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_position = PICKUP_HOME_POSITION;
}
// Called just before this Command runs the first time
void SetPickupPosition::Initialize() 
{
	printf("SetPickupPosition Initialize: %f\n", m_position);
	
	// Ensure the range of the pickup
	if (m_position > PICKUP_MAX_VALUE)
		m_position = PICKUP_MAX_VALUE;
	if (m_position < PICKUP_MIN_VALUE)
		m_position = PICKUP_MIN_VALUE;
	
	// Setup the PID controller
	Robot::pickup->getPIDController()->SetSetpoint(m_position);
	Robot::pickup->getPIDController()->Enable();
}
// Called repeatedly when this Command is scheduled to run
void SetPickupPosition::Execute() 
{
	// <DEBUG>
//	SmartDashboard::PutNumber("Pickup Position", position);
	// </DEBUG>
}
// Make this return true when this Command no longer needs to run execute()
bool SetPickupPosition::IsFinished() 
{
	return fabs(m_position - Robot::pickup->potentiometer->PIDGet()) < PICKUP_THRESHOLD;
}
// Called once after isFinished returns true
void SetPickupPosition::End() 
{
   printf("SetPickupPosition End\n");	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetPickupPosition::Interrupted() 
{
   printf("SetPickupPosition Interrupted\n");	
}
