// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::drivetrainFrontRight = NULL;
SpeedController* RobotMap::drivetrainFrontLeft = NULL;
SpeedController* RobotMap::drivetrainBackRight = NULL;
SpeedController* RobotMap::drivetrainBackLeft = NULL;
RobotDrive* RobotMap::drivetrainDrivetrain = NULL;
Relay* RobotMap::shooterDiskPusher = NULL;
GearTooth* RobotMap::shooterShooterEncoder = NULL;
SpeedController* RobotMap::shooterShooterTalon1 = NULL;
SpeedController* RobotMap::shooterShooterTalon2 = NULL;
DigitalInput* RobotMap::shooterPusherStopSwitch = NULL;
SpeedController* RobotMap::climberClimberTalon1 = NULL;
Relay* RobotMap::climberClimberBeltSystem = NULL;
Servo* RobotMap::climberDiskStopper1 = NULL;
Servo* RobotMap::climberDiskStopper2 = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	drivetrainFrontRight = new Talon(1, 1);
	lw->AddActuator("Drivetrain", "Front Right", (Talon*) drivetrainFrontRight);
	
	drivetrainFrontLeft = new Talon(1, 2);
	lw->AddActuator("Drivetrain", "Front Left", (Talon*) drivetrainFrontLeft);
	
	drivetrainBackRight = new Talon(1, 3);
	lw->AddActuator("Drivetrain", "Back Right", (Talon*) drivetrainBackRight);
	
	drivetrainBackLeft = new Talon(1, 4);
	lw->AddActuator("Drivetrain", "Back Left", (Talon*) drivetrainBackLeft);
	
	drivetrainDrivetrain = new RobotDrive(drivetrainFrontLeft, drivetrainBackLeft,
              drivetrainFrontRight, drivetrainBackRight);
	
	drivetrainDrivetrain->SetSafetyEnabled(true);
        drivetrainDrivetrain->SetExpiration(0.1);
        drivetrainDrivetrain->SetSensitivity(0.5);
        drivetrainDrivetrain->SetMaxOutput(1.0);
	shooterDiskPusher = new Relay(1, 1);
	lw->AddActuator("Shooter", "Disk Pusher", shooterDiskPusher);
	
	shooterShooterEncoder = new GearTooth(1, 1, false);
	lw->AddSensor("Shooter", "Shooter Encoder", shooterShooterEncoder);
	
	shooterShooterTalon1 = new Talon(1, 5);
	lw->AddActuator("Shooter", "Shooter Talon 1", (Talon*) shooterShooterTalon1);
	
	shooterShooterTalon2 = new Talon(1, 6);
	lw->AddActuator("Shooter", "Shooter Talon 2", (Talon*) shooterShooterTalon2);
	
	shooterPusherStopSwitch = new DigitalInput(1, 2);
	lw->AddSensor("Shooter", "Pusher Stop Switch", shooterPusherStopSwitch);
	
	climberClimberTalon1 = new Talon(1, 7);
	lw->AddActuator("Climber", "Climber Talon 1", (Talon*) climberClimberTalon1);
	
	climberClimberBeltSystem = new Relay(1, 2);
	lw->AddActuator("Climber", "Climber Belt System", climberClimberBeltSystem);
	
	climberDiskStopper1 = new Servo(1, 9);
	lw->AddActuator("Climber", "Disk Stopper 1", climberDiskStopper1);
	
	climberDiskStopper2 = new Servo(1, 10);
	lw->AddActuator("Climber", "Disk Stopper 2", climberDiskStopper2);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
